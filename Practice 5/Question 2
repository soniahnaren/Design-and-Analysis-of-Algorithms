import heapq
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
def merge_k_lists(lists):
    min_heap = []
    for i in range(len(lists)):
        if lists[i]:
            heapq.heappush(min_heap, (lists[i].val, i, lists[i]))
    dummy = ListNode()
    current = dummy
    while min_heap:
        val, i, node = heapq.heappop(min_heap)
        current.next = node
        current = current.next
        if node.next:
            heapq.heappush(min_heap, (node.next.val, i, node.next))

    return dummy.next
def to_listnode(lst):
    dummy = ListNode()
    current = dummy
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy.next
def print_listnode(node):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")
list1 = to_listnode([1, 4, 5])
list2 = to_listnode([1, 3, 4])
list3 = to_listnode([2, 6])
lists = [list1, list2, list3]

merged_list = merge_k_lists(lists)
print_listnode(merged_list)
