class Node:
def __init__(self, val):
self.val = val
self.left = None
self.right = None
def existPathUtil(root, arr, n, index):
if not root or index == n:
if not root.left and not root.right:
if root.val == arr[index] and index == n-1:
return True
return False
can be either in left subtree or
# right subtree.
return ((index < n) and (root.val == arr[index]) and \
(existPathUtil(root.left, arr, n, index+1) or \
existPathUtil(root.right, arr, n, index+1)))
def existPath(root, arr, n, index):
if not root:
return (n == 0)
return existPathUtil(root, arr, n, 0)
# Driver Code
if __name__ == "__main__":
arr = [5, 8, 6, 7]
n = len(arr)
root = Node(5)
root.left = Node(3)
root.right = Node(8)
root.left.left = Node(2)
root.left.right = Node(4)
root.left.left.left = Node(1)
root.right.left = Node(6)
root.right.left.right = Node(7)
if existPath(root, arr, n, 0):
print("Path Exists")
else:
print("Path does not Exist")
